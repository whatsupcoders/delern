# Reference: https://cirrus-ci.org/guide/writing-tasks/
# Validation: ruby -ryaml -e 'puts (YAML.load_file ".cirrus.yml")'

env:
  FLUTTER_SDK_ROOT: "${HOME}/flutter"
  PATH: "${HOME}/bin:${FLUTTER_SDK_ROOT}/bin:${PATH}"

fetch_tags_task_template: &FETCH_TAGS_TASK_TEMPLATE
  fetch_tags_script:
  - git fetch --tags

regular_task_template: &REGULAR_TASK_TEMPLATE
  only_if: $CIRRUS_BRANCH == 'master' || $CIRRUS_TAG != '' || $CIRRUS_PR != ''

task:
  << : *REGULAR_TASK_TEMPLATE
  name: firebase
  container:
    image: dasfoo/dev:latest
  node_modules_cache: &NODE_MODULES_CACHE
    folder: firebase/node_modules
    fingerprint_script: cat firebase/package-lock.json
    populate_script: cd firebase && npm ci
  functions_node_modules_cache: &FUNCTIONS_NODE_MODULES_CACHE
    folder: firebase/functions/node_modules
    fingerprint_script: cat firebase/functions/package-lock.json
    populate_script: cd firebase/functions && npm ci
  lint_script:
  - ( cd firebase && npm run check )
  - ( cd firebase/functions && npm run check )
  build_script:
  - ( cd firebase && npm run compile )
  - ( cd firebase/functions && npm run compile )
  # Run firebase-bolt just to verify that the rules parse. Since it always
  # creates output, redirect it to a temporary file to keep Git tree clean.
  - ( cd firebase && node_modules/.bin/firebase-bolt database.rules.bolt -o $(mktemp -u) )

flutter_and_fastlane_task_template: &FLUTTER_AND_FASTLANE_TASK_TEMPLATE
  # TODO(dotdoom): cache is not helpful:
  #                https://github.com/flutter/flutter/issues/39176
  #flutter_cache:
  #  folder: $FLUTTER_SDK_ROOT
  #  fingerprint_script:
  #  - uname -ms
  #  # Rely on fastlane to download and install Flutter.
  dart_build_cache:
    folder: flutter/.dart_tool
    fingerprint_script:
    - uname -ms
  bundler_cache:
    folder: vendor/bundle
    fingerprint_script:
    - uname -ms
    - cat Gemfile.lock
  # This script not only updates dependencies, but also configures bundler where
  # to search for them (via "--deployment" flag, i.e. "vendor/bundle").
  install_fastlane_script: bundle install --clean --deployment
  # Install the exact cocoapods version that we have in development:
  # https://github.com/CocoaPods/CocoaPods/issues/8848.
  install_cocoapods_script: bundle binstubs cocoapods --path "${HOME}/bin"
  install_dependencies_script:
  - cd flutter
  - bundle exec fastlane install_dependencies
  - bundle exec fastlane install_debug_keys

task:
  << : *FETCH_TAGS_TASK_TEMPLATE
  << : *REGULAR_TASK_TEMPLATE
  name: flutter (linux)
  container:
    image: dasfoo/dev:latest
    # TODO(dotdoom): figure out why we don't fit into 4GB for build.
    memory: 6
  env: &LINUX_ENV
    # https://github.com/flutter/flutter/pull/37581
    ANDROID_SDK_ROOT: "${ANDROID_HOME}"

    #ANDROID_SDK_ROOT: "${HOME}/android"
    # For Gradle plugin <3.4: https://issuetracker.google.com/issues/125138969.
    #ANDROID_HOME: "${ANDROID_SDK_ROOT}"
  << : *FLUTTER_AND_FASTLANE_TASK_TEMPLATE
  generate_and_lint_script:
  - cd flutter
  - bundle exec fastlane generate
  - bundle exec fastlane lint
  test_script:
  - ( cd flutter && flutter test --coverage )
  # Simulate Travis CI until https://github.com/codecov/codecov-bash/pull/127.
  - CODECOV_TOKEN=eeabc1cc-89fc-447f-969d-39777e568284
    TRAVIS=true
    TRAVIS_COMMIT="$CIRRUS_CHANGE_IN_REPO"
    TRAVIS_JOB_NUMBER="$CIRRUS_TASK_ID"
    TRAVIS_PULL_REQUEST="$CIRRUS_PR"
    TRAVIS_JOB_ID="$CIRRUS_TASK_NAME"
    TRAVIS_REPO_SLUG="$CIRRUS_REPO_FULL_NAME"
    TRAVIS_TAG="$CIRRUS_TAG"
    TRAVIS_BRANCH="$CIRRUS_BRANCH"
    TRAVIS_OS_NAME="$CIRRUS_OS"
    bash <(curl -s https://codecov.io/bash)
  gradle_cache:
    folder: ~/.gradle/caches
    fingerprint_script:
    - cd flutter
    - cat pubspec.lock
    - cat android/build.gradle
    - cat android/app/build.gradle
  # https://github.com/flutter/flutter/pull/37581
  #android_sdk_cache:
  #  folder: $ANDROID_SDK_ROOT
  #  fingerprint_script:
  #  - uname -ms
  #  - cat flutter/android/app/build.gradle
  build_script:
  - ( cd flutter && bundle exec fastlane android build )
  ensure_clean_git_script: bundle exec fastlane ensure_clean_git
  cleanup_before_cache_script:
  - rm -rf flutter/.dart_tool/flutter_build
  # https://cirrus-ci.org/examples/#caching
  - rm -rf ~/.gradle/caches/*.*/
  - find ~/.gradle/caches/ -name "*.lock" -type f -delete
  # Some additional files.
  - rm -rf ~/.gradle/caches/transforms-1 ~/.gradle/caches/journal-1
  always:
    move_artifacts_script:
    - mv flutter/build/app/outputs/apk/debug/app-debug.apk
      "${CIRRUS_REPO_NAME}.apk"
    apk_artifacts:
      path: ${CIRRUS_REPO_NAME}.apk

task:
  << : *FETCH_TAGS_TASK_TEMPLATE
  << : *REGULAR_TASK_TEMPLATE
  name: flutter (osx)
  osx_instance: &OSX_INSTANCE
    image: mojave-xcode-10.2
  << : *FLUTTER_AND_FASTLANE_TASK_TEMPLATE
  generate_script:
  - cd flutter
  - bundle exec fastlane generate
  # Keep repo up-to-date: https://github.com/CocoaPods/CocoaPods/issues/8761.
  pod_specs_repo_update_script: pod repo update
  build_script:
  - ( cd flutter && bundle exec fastlane ios build )
  ensure_clean_git_script: bundle exec fastlane ensure_clean_git
  cleanup_before_cache_script:
  - rm -rf flutter/.dart_tool/flutter_build
  always:
    move_artifacts_script:
    - mv flutter/build/ios/iphoneos/Runner.app "${CIRRUS_REPO_NAME}.app"
    app_artifacts:
      path: ${CIRRUS_REPO_NAME}.app/**/*
      # When updating pubspec.yaml on non-OSX, remember that dependencies may
      # change in Podfile.lock. In such case, OSX build will fail, but you can
      # grab a ready-made Podfile.lock from artifacts and push.
      path: flutter/ios/Podfile.lock

deploy_task_template: &DEPLOY_TASK_TEMPLATE
  only_if: $CIRRUS_BRANCH == 'master' || $CIRRUS_TAG =~ '^[0-9]+[.][0-9]+$'

gcloud_env_template: &GCLOUD_ENV_TEMPLATE
  CLOUDSDK_CORE_DISABLE_PROMPTS: 1
  # This environment variable is read by gcloud CLI to e.g. deploy AppEngine.
  GOOGLE_APPLICATION_CREDENTIALS: $HOME/gcloud-service-account.json
  GOOGLE_APPLICATION_CREDENTIALS_DATA: "ENCRYPTED\
    [cb7b54e2c45ee30b31aa25fc72b9c4ba0466d6fb4f87c0aa\
    13088ca6627460186af52248c2d6287f9be05b6c7889a4b5]"

task:
  << : *FETCH_TAGS_TASK_TEMPLATE
  << : *DEPLOY_TASK_TEMPLATE
  name: deploy (firebase)
  depends_on: firebase
  container:
    image: dasfoo/dev:latest
  env:
    FIREBASE_TOKEN: "ENCRYPTED\
      [206e15874255b9352f2aff03986bcb3aa8017a2cd400f6e8\
      3589438802735f5377cc732c2e66292abcca63f23fe3d6cf]"
    << : *GCLOUD_ENV_TEMPLATE
  node_modules_cache:
    << : *NODE_MODULES_CACHE
  functions_node_modules_cache:
    << : *FUNCTIONS_NODE_MODULES_CACHE
  configure_gcloud_script: &CONFIGURE_GCLOUD_SCRIPT
  - echo "${GOOGLE_APPLICATION_CREDENTIALS_DATA?}" >
    "${GOOGLE_APPLICATION_CREDENTIALS?}"
  - gcloud auth activate-service-account
    --key-file "${GOOGLE_APPLICATION_CREDENTIALS?}"
  deploy_script:
  - ( cd firebase && PROJECT=delern-debug npm run deploy )
  - ( cd firebase && PROJECT=delern-e1b33 npm run deploy )

task:
  << : *FETCH_TAGS_TASK_TEMPLATE
  << : *DEPLOY_TASK_TEMPLATE
  name: deploy (Play Store)
  depends_on:
  # Requires deployment of Security Rules etc.
  - deploy (firebase)
  - flutter (linux)
  container:
    image: dasfoo/dev:latest
  env:
    << : *LINUX_ENV
    << : *GCLOUD_ENV_TEMPLATE
    # This environment variable is read by Fastlane Supply, which uses the same
    # account we use to access GCloud, to upload the app to Play Store.
    SUPPLY_JSON_KEY: $GOOGLE_APPLICATION_CREDENTIALS
    ANDROID_KEYSTORE_PATH: $HOME/release.keystore
    ANDROID_KEYSTORE_DATA: "ENCRYPTED\
      [5b5017f1721b6ac5f3027aea02c84594ef4f8413bb9b46a2\
      9bb117b7d8b2fa10a6152bcf0d84bb5bae66f05960d1f9e6]"
  << : *FLUTTER_AND_FASTLANE_TASK_TEMPLATE
  configure_gcloud_script: *CONFIGURE_GCLOUD_SCRIPT
  publish_script:
  - echo "${ANDROID_KEYSTORE_DATA?}" | base64 -d > "${ANDROID_KEYSTORE_PATH?}"
  - ( cd flutter && bundle exec fastlane android publish "release:$CIRRUS_TAG" )
  always:
    move_artifacts_script:
    - mv flutter/build/app/outputs/bundle/release/app.aab
      "${CIRRUS_REPO_NAME}.aab"
    aab_artifacts:
      path: "${CIRRUS_REPO_NAME}.aab"

task:
  << : *FETCH_TAGS_TASK_TEMPLATE
  << : *DEPLOY_TASK_TEMPLATE
  name: deploy (App Store)
  depends_on:
  - deploy (firebase)
  - flutter (osx)
  osx_instance:
    << : *OSX_INSTANCE
  env:
    << : *GCLOUD_ENV_TEMPLATE
    # Task-specific env definitions override root-level env.
    PATH: "${HOME}/bin:\
      ${FLUTTER_SDK_ROOT}/bin:\
      ${HOME}/google-cloud-sdk/bin:\
      ${PATH}"
    FASTLANE_USER: "ENCRYPTED\
      [d119882919ae56899d9383eb6cbf1c88d33ad833ecd0c785\
      16ec12f40f76155e6de77a29d51e653a9fd6c5088ab92853]"
    FASTLANE_PASSWORD: "ENCRYPTED\
      [436aaa528374bad76f3a864134d486ca635e6adfc0048ae8\
      412eb17a7c5c33297a6d5f1e03729badbd2be6d4da30d34c]"
    MATCH_PASSWORD: "ENCRYPTED\
      [cd6200a4c7807169411fa73582001e2feea3ce3a1ad95277\
      b68c248a72538992027a5fb59d80884bdd7bd9d87091a2f7]"
    MATCH_GIT_URL: "ENCRYPTED\
      [bcd44b07e11df836376f23b5f6e527c7b6e554a321050c1a\
      bc7655d8560e1f37d3d27df5d3dcba00dd73ac40148c247b]"
  << : *FLUTTER_AND_FASTLANE_TASK_TEMPLATE
  install_gcloud_script:
  - curl -sSL https://sdk.cloud.google.com | bash -s
  - >
    git config --global credential.https://source.developers.google.com.helper
    gcloud.sh
  configure_gcloud_script: *CONFIGURE_GCLOUD_SCRIPT
  # Keep repo up-to-date: https://github.com/CocoaPods/CocoaPods/issues/8761.
  pod_specs_repo_update_script: pod repo update
  publish_script:
  - ( cd flutter && bundle exec fastlane ios publish "release:$CIRRUS_TAG" )
  always:
    move_artifacts_script:
    - mv flutter/build/Runner.ipa "${CIRRUS_REPO_NAME}.ipa"
    ipa_artifacts:
      path: ${CIRRUS_REPO_NAME}.ipa
