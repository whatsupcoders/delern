fastlane_require 'fileutils'

default_platform(:android)

module SharedValues
  PROMOTE_RELEASE = :PROMOTE_RELEASE
end

before_all do |lane, options|
  if [:build, :publish].include?(lane)
    commits_since_last_tag = changelog_from_git_commits(
      quiet: true,
      # One line per commit, which allows us to easily count them.
      pretty: 'oneline',
      # We push to "master" only when merging a PR, so increment with each merge.
      merge_commit_filtering: 'only_include_merges',
    ).lines.count
    # changelog_from_git_commits populates this context, causing some actions
    # (e.g. upload_to_testflight) to pick it up instead of our text files.
    lane_context.delete(SharedValues::FL_CHANGELOG)

    # Keep even numbers for internal releases, and odd numbers for public, to
    # make sure they do not clash as the number of commits is usually the same.
    lane_context[SharedValues::BUILD_NUMBER] = number_of_commits * 2 + 1000
    lane_context[SharedValues::VERSION_NUMBER] = options[:release].to_s
    if lane_context[SharedValues::VERSION_NUMBER].empty?
      lane_context[SharedValues::VERSION_NUMBER] = '%s.%d' % [
        # First 2 digits of version number are taken from tag (ex.: "2.1").
        last_git_tag,
        # Add the number of commits afterwards, multiplied by 10 to allow room
        # for manual testing of CI/CD, if necessary.
        commits_since_last_tag * 10,
      ]
      lane_context[SharedValues::PROMOTE_RELEASE] = false
    else
      # We complement the tag (e.g. "2.1") to "2.1.0", which App Store will do
      # anyway, but this way we also make it consistent with Play Store.
      lane_context[SharedValues::VERSION_NUMBER] += '.0'
      lane_context[SharedValues::BUILD_NUMBER] += 1
      lane_context[SharedValues::PROMOTE_RELEASE] = true
    end
  end
end

def retry_on_exception(extra_attempts=2, initial_delay=1)
  extra_attempts -= 1
  yield
rescue => e
  raise if extra_attempts < 0

  UI.error(e)
  if extra_attempts > 0
    UI.important("Retrying after #{initial_delay}s, " \
                 "#{extra_attempts + 1} attempts left!")
  else
    UI.important("Retrying after #{initial_delay}s, last attempt!")
  end

  sleep(initial_delay)
  initial_delay *= 2
  retry
end

desc 'Install or upgrade Flutter and Android SDK licenses'
lane :install_dependencies do
  bootstrap_options = {
    flutter_channel: 'beta',
  }

  if ENV.key?('ANDROID_SDK_ROOT')
    # License hashes. These are NOT secret!
    # Copy them from $ANDROID_SDK_ROOT/licenses/ directory for the license
    # agreements you accept.
    bootstrap_options[:android_licenses] = {
      'android-sdk-license' => '24333f8a63b6825ea9c5514f83c2829b004d1fee',
    }
  end

  flutter_bootstrap(bootstrap_options)
end

desc 'Generate files for Intl and built_value and format all files'
lane :generate do
  flutter_generate(
    intl_strings_file: 'lib/l10n/app_localizations.dart',
    intl_strings_locale: 'en_US',
  )
  flutter(args: %w(format .))
end

desc 'Run static analysis on Flutter files'
lane :lint do
  flutter(args: %w(analyze))
end

desc 'Replace system-wide Android debug keystore and app-wide GoogleServices'
desc 'with those configured for "delern-debug" Firebase project'
lane :install_debug_keys do |options|
  FileUtils.cp(
    'debug-project/google-services.json',
    '../android/app/',
    verbose: true)
  FileUtils.cp(
    'debug-project/org.dasfoo.delern.debug',
    '../ios/Runner/GoogleService-Info.plist',
    verbose: true)
  FileUtils.cp(
    'debug-project/FirebaseLocalDeveloper.xcconfig',
    '../ios/Flutter/',
    verbose: true)

  system_wide_android_directory = File.expand_path('~/.android/')
  FileUtils.mkdir_p(system_wide_android_directory)
  FileUtils.cp(
    'debug-project/debug.keystore',
    system_wide_android_directory,
    verbose: true)
end

platform :android do
  desc 'Build a debug APK'
  lane :build do
    flutter_build(debug: true)
  end

  desc 'Build a release AAB and publish it (including Store artifacts).'
  desc 'Set "release" lane key to non-empty value to upload to "alpha" track.'
  lane :publish do |options|
    aab = flutter_build(build: 'appbundle')
    retry_on_exception do
      supply(
        track: lane_context[SharedValues::PROMOTE_RELEASE] ? 'alpha'
                                                           : 'internal',
        aab: aab,
      )
    end
  end
end

platform :ios do
  desc 'Build a debug iOS package'
  lane :build do
    flutter_build(
      debug: true,
      build_args: ['--no-codesign'],
    )
  end

  desc 'Build a release iOS package and publish it (including Store artifacts).'
  desc 'Set "release" lane key to non-empty value to upload metadata.'
  lane :publish do |options|
    # Set up OS X keychain and switch match to readonly model. This command has
    # no effect outside CI.
    setup_travis

    app_identifier = 'org.dasfoo.delern'

    match(
      type: 'appstore',
      app_identifier: app_identifier,
    )
    FileUtils.cp(
      'debug-project/org.dasfoo.delern',
      '../ios/Runner/GoogleService-Info.plist',
      verbose: true)
    # Perform an (otherwise unnecessary) build to:
    # - add version
    # - switch to release mode
    flutter_build
    gym(silent: true, suppress_xcode_output: true)

    retry_on_exception do
      # It's important to retry this step either, because we don't know whether
      # the other upload (e.g. Play Store) has succeeded, and there's no way to
      # retry a specific build with GitHub Actions:
      # https://github.community/t5/GitHub-Actions/How-to-retry-a-build-that-failed/m-p/32785#M1248
      upload_to_testflight(
        distribute_external: true,
        # Changelog is required for TestFlight.
        changelog: 'Look for latest changes at ' +
                   'https://github.com/dasfoo/delern/commits/master',
        groups: lane_context[SharedValues::PROMOTE_RELEASE] ? ['alpha']
                                                            : ['internal'],
      )
    end

    if lane_context[SharedValues::PROMOTE_RELEASE]
      retry_on_exception do
        upload_to_app_store(
          app_identifier: app_identifier,
          overwrite_screenshots: true,
          submit_for_review: true,
          submission_information: {
            add_id_info_uses_idfa: false,
          },

          # Skip the HTML report file verification.
          force: true,

          # Binary is already uploaded by upload_to_testflight, just use it.
          skip_binary_upload: true,
          build_number: lane_context[SharedValues::BUILD_NUMBER].to_s,

          # Override because defaults make directory layout messy.
          # Default is: "screenshots".
          screenshots_path: File.join(Dir.pwd, 'metadata/ios/screenshots'),
          # Default is: "metadata". Also have to bury it into additional directory
          # because storing metadata in "metadata/ios" complains about
          # unrecognized subdirectory "screenshots".
          metadata_path: File.join(Dir.pwd, 'metadata/ios/metadata'),
        )
      end
    end
  end
end

# vim: ft=ruby
