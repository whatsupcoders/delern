# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#

lane :ensure_clean_git do
  ensure_git_status_clean(show_diff: true)
end

lane :update_analysis_options do
  # TODO(dotdoom): move into fastlane-flutter plugin.
  fastlane_require 'yaml'
  fastlane_require 'open-uri'

  local_file = '../flutter/analysis_options.yaml'

  all_rules = YAML.load(open(
    'https://raw.githubusercontent.com/dart-lang/linter/' +
    'master/example/all.yaml').read)['linter']['rules'].sort
  existing_rules = YAML.load_file(local_file)['linter']['rules']

  if (all_rules - existing_rules.keys).any?
    enabled_rules = (all_rules - existing_rules.reject { |k, v| v }.keys).sort
    open(local_file, 'r+') do |f|
      break if f.eof? while f.gets.strip != '# AUTOGENERATED CONTENT UNTIL EOF'
      f.truncate(f.pos)
      enabled_rules.each do |rule|
        f.puts "    #{rule}: true"
      end
    end
  end
end

desc 'Update all dependencies in lockfiles (bundler, npm, Flutter)'
lane :update do
  update_analysis_options
  Dir.chdir('..') do
    sh %w(bundle update)
    Dir.chdir('flutter') do
      flutter_bootstrap
      Dir.chdir('fastlane') do
        flutter(args: %w(packages upgrade))
      end
      if RUBY_PLATFORM.include? 'darwin'
        Dir.chdir('ios') { sh %w(bundle exec pod update) }
      end
    end
    Dir.chdir('firebase') do
      sh %w(npm update)
      Dir.chdir('functions') do
        sh %w(npm update)
      end
    end
  end
end

def _github_fork_name()
  git_remotes = sh(%w(git remote)).split
  # Definitely not what we want.
  git_remotes.delete('upstream')
  # Try to use "origin" if we have it, otherwise whatever we have.
  origin_git_remote = git_remotes.include?('origin') ?
    'origin' : git_remotes.first

  fastlane_require 'git/remote/parser'
  url_parser = Git::Remote::Parser.new
  url_parser.parse(
    sh(%W(git remote get-url #{origin_git_remote})).strip
  ).owner
rescue => e
  UI.important(e)
  UI.input('Cannot autodetect fork name. What is your GitHub handle? ')
end

desc 'Create or migrate a debug Firebase project for this GitHub fork'
lane :setup do
  Dir.chdir('../firebase') do
    software = {
      'Google Cloud SDK' => [
        lambda do
          # This will fail if user is not authorized, triggering error message.
          sh(%w(gcloud auth print-access-token), log: false)
          Helper.backticks('gcloud --version').lines.first
        end,
        'https://cloud.google.com/sdk/install and run "gcloud init"',
      ],
      'NodeJS npm' => [
        lambda { Helper.backticks('npm --version') },
        'https://nodejs.org/',
      ],
      'keytool from JDK' => [
        lambda { Helper.backticks("keytool 2>#{File::NULL}") && 'it' },
        'https://www3.ntu.edu.sg/home/ehchua/programming/howto/JDK_Howto.html',
      ],
    }.map do |software_name, (version_getter, download_url)|
      begin
        "✔️ #{software_name} (you have #{version_getter[].strip} installed)"
      rescue
        "⚠️ #{software_name} (download at #{download_url})"
      end
    end

    puts <<INFO
Welcome to Fastlane Setup tool!

This tool requires the following software to be installed on this computer (and
corresponding binaries must be in your PATH environment variable):

#{software.map { |s| "  - #{s}" }.join("\n")}

We will proceed now anyway, but if some of this software is missing, you will
likely get an error!

INFO

    project_id = "delern-debug-#{_github_fork_name()}"
    sh %w(npm install)
    Dir.chdir('functions') { sh %w(npm install) }
    fastlane_require 'shellwords'
    # Give Firebase login interactive mode and do not crop lines.
    exec %W(npm start -- #{project_id}).shelljoin
  end
end

# vim: ft=ruby
